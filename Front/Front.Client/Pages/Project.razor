@page "/projekty"
@using System.Net.Http.Json
@using MudBlazor
@using System.Text.Json.Serialization
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div style="margin-top: 2rem;" />
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="@ProjectList" Hover="true" Dense="false" ReadOnly="false" CanCancelEdit="true"
              EditTrigger="TableEditTrigger.EditButton" EditButtonPosition="TableEditButtonPosition.End"
              ApplyButtonPosition="TableApplyButtonPosition.End"
              RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
              Filter="new Func<ProjectDetails,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lista Projektów</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:50px;" />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col style="width:50px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.Name)">Nazwa</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.OfficeAddress)">Adres</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.ProjectNIP)">NIP</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.EmployeeAmount)">Ilość Pracowników</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.FreePlaces)">Wolne Miejsca</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.AmountCars)">Ilość Samochodów</MudTableSortLabel></MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Nazwa">@context.Name</MudTd>
                <MudTd DataLabel="Adres">@context.OfficeAddress</MudTd>
                <MudTd DataLabel="NIP">@context.ProjectNIP</MudTd>
                <MudTd DataLabel="Ilość Pracowników">@context.EmployeeAmount</MudTd>
                <MudTd DataLabel="Wolne Miejsca">@context.FreePlaces</MudTd>
                <MudTd DataLabel="Ilość Samochodów">@context.AmountCars</MudTd>
                <MudTd DataLabel="Akcje">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Href="@($"/projekt/szczegoly/{context.Id}")">
                        Szczegóły
                    </MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div style="display: flex; justify-content: flex-end; margin-top: 1rem;">
            <MudButton Variant="Variant.Filled" Color="Color.Surface" Href="/formularz-projektowy">Dodaj Projekt</MudButton>
        </div>
    </MudContainer>

    @code {
    private string searchString = string.Empty;
    private List<ProjectDetails> ProjectList = new List<ProjectDetails>();
    private ProjectDetails projectBeforeEdit;
    private ProjectDetails selectedProject;
    private bool isDetailsDialogOpen = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            
            if (!string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                NavigationManager.NavigateTo("/");
            }

            var projects = await Http.GetFromJsonAsync<List<ProjectDetails>>("projects");
            if (projects != null)
            {
                ProjectList = projects;
            }
            else
            {
                Snackbar.Add("Brak danych projektów do wyświetlenia.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania danych projektów: {ex.Message}", Severity.Error);
        }
    }

    private void BackupItem(object project)
    {
        projectBeforeEdit = new ProjectDetails
            {
                Id = ((ProjectDetails)project).Id,
                Name = ((ProjectDetails)project).Name,
                OfficeAddress = ((ProjectDetails)project).OfficeAddress,
                ProjectNIP = ((ProjectDetails)project).ProjectNIP,
                EmployeeAmount = ((ProjectDetails)project).EmployeeAmount,
                FreePlaces = ((ProjectDetails)project).FreePlaces,
                AmountCars = ((ProjectDetails)project).AmountCars
            };
    }

    private void ResetItemToOriginalValues(object project)
    {
        ((ProjectDetails)project).Id = projectBeforeEdit.Id;
        ((ProjectDetails)project).Name = projectBeforeEdit.Name;
        ((ProjectDetails)project).OfficeAddress = projectBeforeEdit.OfficeAddress;
        ((ProjectDetails)project).ProjectNIP = projectBeforeEdit.ProjectNIP;
        ((ProjectDetails)project).EmployeeAmount = projectBeforeEdit.EmployeeAmount;
        ((ProjectDetails)project).FreePlaces = projectBeforeEdit.FreePlaces;
        ((ProjectDetails)project).AmountCars = projectBeforeEdit.AmountCars;
    }

    private void ItemHasBeenCommitted(object project)
    {
        Snackbar.Add($"Projekt {((ProjectDetails)project).Name} został zaktualizowany.", Severity.Success);
    }

    private bool FilterFunc(ProjectDetails project)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return project.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               project.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               project.OfficeAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               project.ProjectNIP.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void ShowDetails(ProjectDetails project)
    {
        selectedProject = project;
        isDetailsDialogOpen = true;
    }

    public class ProjectDetails
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("office_address")]
        public string OfficeAddress { get; set; }
        [JsonPropertyName("project_nip")]
        public string ProjectNIP { get; set; }
        [JsonPropertyName("employee_amount")]
        public int EmployeeAmount { get; set; }
        [JsonPropertyName("free_places")]
        public int FreePlaces { get; set; }
        [JsonPropertyName("amount_cars")]
        public int AmountCars { get; set; }
    }
}
