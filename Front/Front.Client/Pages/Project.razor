@page "/projekty"
@using System.Net.Http.Json
@using MudBlazor
@inject ISnackbar Snackbar

<div style="margin-top: 2rem;" />
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="@ProjectList" Hover="true" Dense="false" ReadOnly="false" CanCancelEdit="true"
              EditTrigger="TableEditTrigger.EditButton" EditButtonPosition="TableEditButtonPosition.End"
              ApplyButtonPosition="TableApplyButtonPosition.End"
              RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted"
              Filter="new Func<ProjectDetails,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lista Projektów</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:50px;" />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col style="width:50px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.Name)">Nazwa</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.HeadquartersAddress)">Adres</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.TaxId)">NIP</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.EmployeeCount)">Ilość Pracowników</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.AccommodationSlots)">Wolne Miejsca</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProjectDetails, object>(x => x.CarCount)">Ilość Samochodów</MudTableSortLabel></MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nazwa">@context.Name</MudTd>
            <MudTd DataLabel="Adres">@context.HeadquartersAddress</MudTd>
            <MudTd DataLabel="NIP">@context.TaxId</MudTd>
            <MudTd DataLabel="Ilość Pracowników">@context.EmployeeCount</MudTd>
            <MudTd DataLabel="Wolne Miejsca">@context.AccommodationSlots</MudTd>
            <MudTd DataLabel="Ilość Samochodów">@context.CarCount</MudTd>
            <MudTd DataLabel="Akcje">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="() => ShowDetails(context)">
                    Szczegóły
                </MudButton>
            </MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Nazwa">
                <MudTextField @bind-Value="context.Name" Required />
            </MudTd>
            <MudTd DataLabel="Adres">
                <MudTextField @bind-Value="context.HeadquartersAddress" Required />
            </MudTd>
            <MudTd DataLabel="NIP">
                <MudTextField @bind-Value="context.TaxId" Required />
            </MudTd>
            <MudTd DataLabel="Ilość Pracowników">
                <MudNumericField @bind-Value="context.EmployeeCount" Required Min="0" />
            </MudTd>
            <MudTd DataLabel="Wolne Miejsca">
                <MudNumericField @bind-Value="context.AccommodationSlots" Required Min="0" />
            </MudTd>
            <MudTd DataLabel="Ilość Samochodów">
                <MudNumericField @bind-Value="context.CarCount" Required Min="0" />
            </MudTd>
        </RowEditingTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>

    <div style="display: flex; justify-content: flex-end; margin-top: 1rem;">
        <MudButton Variant="Variant.Filled" Color="Color.Surface" OnClick="AddProject">Dodaj Projekt</MudButton>
    </div>
</MudContainer>

<MudDialog @bind-IsVisible="isDetailsDialogOpen" MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">Szczegóły Projektu</MudText>
         <MudTable Items="@ProjectList" T="ProjectDetails" Hover="true" Dense="false" ReadOnly="false"
                   CanCancelEdit="true" EditTrigger="TableEditTrigger.EditButton"
                   EditButtonPosition="TableEditButtonPosition.End"
                   ApplyButtonPosition="TableApplyButtonPosition.End"
                   RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
                   RowEditCommit="ItemHasBeenCommitted"
                   Filter="new Func<ProjectDetails,bool>(FilterFunc)">
             <Row>
                <MudTd><strong>Nazwa:</strong></MudTd>
                <MudTd>@selectedProject?.Name</MudTd>
            </Row>
            <Row>
                <MudTd><strong>Adres:</strong></MudTd>
                <MudTd>@selectedProject?.HeadquartersAddress</MudTd>
            </Row>
            <Row>
                <MudTd><strong>NIP:</strong></MudTd>
                <MudTd>@selectedProject?.TaxId</MudTd>
            </Row>
            <Row>
                <MudTd><strong>Ilość Pracowników:</strong></MudTd>
                <MudTd>@selectedProject?.EmployeeCount</MudTd>
            </Row>
            <Row>
                <MudTd><strong>Wolne Miejsca:</strong></MudTd>
                <MudTd>@selectedProject?.AccommodationSlots</MudTd>
            </Row>
            <Row>
                <MudTd><strong>Ilość Samochodów:</strong></MudTd>
                <MudTd>@selectedProject?.CarCount</MudTd>
            </Row>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => isDetailsDialogOpen = false">
            Zamknij
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string searchString = string.Empty;
    private List<ProjectDetails> ProjectList = new List<ProjectDetails>
    {
        new ProjectDetails
        {
            Name = "Projekt 1",
            HeadquartersAddress = "Warszawa, ul. Przykładowa 1",
            TaxId = "123-456-78-90",
            EmployeeCount = 10,
            AccommodationSlots = 5,
            CarCount = 2
        },
        new ProjectDetails
        {
            Name = "Projekt 2",
            HeadquartersAddress = "Krzaków, ul. Przykładowa 1",
            TaxId = "444-456-78-90",
            EmployeeCount = 25,
            AccommodationSlots = 6,
            CarCount = 7
        }
    };
    private ProjectDetails projectBeforeEdit;
    private ProjectDetails selectedProject;
    private bool isDetailsDialogOpen = false;

    private void AddProject()
    {
         
    }

    private void BackupItem(object project)
    {
        projectBeforeEdit = new ProjectDetails
        {
            Name = ((ProjectDetails)project).Name,
            HeadquartersAddress = ((ProjectDetails)project).HeadquartersAddress,
            TaxId = ((ProjectDetails)project).TaxId,
            EmployeeCount = ((ProjectDetails)project).EmployeeCount,
            AccommodationSlots = ((ProjectDetails)project).AccommodationSlots,
            CarCount = ((ProjectDetails)project).CarCount
        };
    }

    private void ResetItemToOriginalValues(object project)
    {
        ((ProjectDetails)project).Name = projectBeforeEdit.Name;
        ((ProjectDetails)project).HeadquartersAddress = projectBeforeEdit.HeadquartersAddress;
        ((ProjectDetails)project).TaxId = projectBeforeEdit.TaxId;
        ((ProjectDetails)project).EmployeeCount = projectBeforeEdit.EmployeeCount;
        ((ProjectDetails)project).AccommodationSlots = projectBeforeEdit.AccommodationSlots;
        ((ProjectDetails)project).CarCount = projectBeforeEdit.CarCount;
    }

    private void ItemHasBeenCommitted(object project)
    {
        Snackbar.Add($"Projekt {((ProjectDetails)project).Name} został zaktualizowany.", Severity.Success);
    }

    private bool FilterFunc(ProjectDetails project)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return project.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               project.HeadquartersAddress.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               project.TaxId.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void ShowDetails(ProjectDetails project)
    {
        selectedProject = project;
        isDetailsDialogOpen = true;
    }

    public class ProjectDetails
    {
        public string Name { get; set; }
        public string HeadquartersAddress { get; set; }
        public string TaxId { get; set; }
        public int EmployeeCount { get; set; }
        public int AccommodationSlots { get; set; }
        public int CarCount { get; set; }
    }
}
