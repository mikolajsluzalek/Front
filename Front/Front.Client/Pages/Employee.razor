@page "/pracownicy"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigate

<div style="margin-top: 2rem;" />
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="@EmployeeList" Hover="true" Dense="false" ReadOnly="false" Filter="new Func<EmployeeDetails,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lista Pracowników</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col style="width:150px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<EmployeeDetails, object>(x => x.FirstName)">Imię</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<EmployeeDetails, object>(x => x.LastName)">Nazwisko</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<EmployeeDetails, object>(x => x.Pesel)">Pesel</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<EmployeeDetails, object>(x => x.PassportNumber)">Numer Paszportu</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<EmployeeDetails, object>(x => x.DateOfBirth)">Data Urodzenia</MudTableSortLabel></MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Imię">@context.FirstName</MudTd>
            <MudTd DataLabel="Nazwisko">@context.LastName</MudTd>
            <MudTd DataLabel="Pesel">@context.Pesel</MudTd>
            <MudTd DataLabel="Numer Paszportu">@context.PassportNumber</MudTd>
            <MudTd DataLabel="Data Urodzenia">@context.DateOfBirth.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Akcje">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Href="@($"/pracownicy/szczegoly/{context.Id}")">
                    Szczegóły
                </MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <div style="display: flex; justify-content: flex-end; margin-top: 1rem;">
            <MudButton Variant="Variant.Filled" Color="Color.Surface" Href="/formularz-pracowniczy">Dodaj Pracownika</MudButton>
    </div>
</MudContainer>

@code {
    private string searchString = string.Empty;
    private List<EmployeeDetails> EmployeeList = new List<EmployeeDetails>();
    private EmployeeDetails selectedEmployee;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                Navigate.NavigateTo("/");
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var employees = await Http.GetFromJsonAsync<List<EmployeeDetails>>("employees");
            if (employees != null)
            {
                EmployeeList = employees;
            }
            else
            {
                Snackbar.Add("Nie udało się załadować danych pracowników.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania pracowników: {ex.Message}", Severity.Error);
        }
    }

    private bool FilterFunc(EmployeeDetails employee)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return employee.FirstName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               employee.LastName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               employee.Pesel?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               employee.PassportNumber?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    public class EmployeeDetails
    {
        public int Id { get; set; }
        [JsonPropertyName("first_name")]
        public string FirstName { get; set; }
        [JsonPropertyName("last_name")]
        public string LastName { get; set; }
        [JsonPropertyName("pesel")]
        public string Pesel { get; set; }
        [JsonPropertyName("passport_number")]
        public string PassportNumber { get; set; }
        [JsonPropertyName("date_of_birth")]
        public DateTime DateOfBirth { get; set; }
    }
}
