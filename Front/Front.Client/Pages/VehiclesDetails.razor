@page "/samochod/szczegoly/{id:int}"
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h5" Class="mb-3">Szczegóły Pojazdu</MudText>
    @if (isLoading)
    {
        <MudProgressLinear Indeterminate="true" />
    }
    else if (@vehicle != null)
    {
        <MudForm @ref="editForm" Class="mb-3">
    <!-- Dane pojazdu -->
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="vehicle.Model" Label="Model" Required="true" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="vehicle.Color" Label="Kolor" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="vehicle.RegistrationNumber" Label="Numer Rejestracyjny" Required="true" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="vehicle.Vin" Label="VIN" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDatePicker @bind-Date="vehicle.InspectionFrom" DateFormat="yyyy-MM-dd" Label="Serwis od" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudDatePicker @bind-Date="vehicle.InspectionTo" DateFormat="yyyy-MM-dd" Label="Serwis do" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudDatePicker @bind-Date="vehicle.InsuranceFrom" DateFormat="yyyy-MM-dd" Label="Ubezpieczenie od" />
                </MudItem>
                <MudItem xs="12" md="6">
    <MudDatePicker @bind-Date="vehicle.InsuranceTo" DateFormat="yyyy-MM-dd" Label="Ubezpieczenie do" />
</MudItem>
<MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.FleetCardNumber" Label="Numer Karty Floty" />
</MudItem>
<MudItem xs="12" md="6">
    <MudSelect @bind-Value="vehicle.IdProject" Label="Nazwa Projektu" Required="true">
        @foreach (var project in projectId)
        {
            <MudSelectItem Value="@(project.Id)">@project.Name</MudSelectItem>
        }
    </MudSelect>
    </MudItem>

    <!-- Dane serwisu -->
    <MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.Service.ServiceName" Label="Nazwa serwisu" Required="true" />
    </MudItem>
    <MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.Service.Address" Label="Adres serwisu" />
    </MudItem>
    <MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.Service.PhoneNumber" Label="Telefon serwisu" />
    </MudItem>

    <!-- Dane leasingu -->
    <MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.Leasing.Amount" Label="Kwota leasingu" Required="true" />
    </MudItem>
    <MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.Leasing.MonthlyPayment" Label="Miesięczna rata" />
    </MudItem>
    <MudItem xs="12" md="6">
    <MudTextField @bind-Value="vehicle.Leasing.PaymentDay" Label="Dzień płatności" />
    </MudItem>
    </MudGrid>
</MudForm>

        <div style="display: flex; justify-content: space-between; align-items: center;">
    <div style="display: flex; gap: 1rem;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" Disabled="@isSubmitting">
            Zapisz zmiany
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteVehicle" Disabled="@isSubmitting">
            Usuń Samochód
        </MudButton>
    </div>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="NavigateBack">
        Powrót
    </MudButton>
</div>
    }
    else
    {
        <MudText Color="Color.Error">Nie udało się załadować szczegółów pojazdu.</MudText>
    }

</MudContainer>

@code {
    [Parameter]
    public int id { get; set; }

    private VehicleDetails vehicle;
    private ProjectIds projects;
    private List<ProjectIds> projectId = new List<ProjectIds>();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private MudForm editForm;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                Navigation.NavigateTo("/");
            }

            Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);


            vehicle = await Http.GetFromJsonAsync<VehicleDetails>($"car/{id}");
            if (vehicle == null)
            {
                Snackbar.Add($"Nie znaleziono pojazdu o ID {id}.", Severity.Warning);
            }

            var projects = await Http.GetFromJsonAsync<List<ProjectIds>>("project/names");
            if (projects != null)
            {
                projectId = projects.Select(pro => new ProjectIds
                    {
                        Id = pro.Id,
                        Name = pro.Name
                    }).ToList();
            }
            else
            {
                Snackbar.Add("Nie udało się załadować danych pojazdów.", Severity.Error);
            }


        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add($"Pojazd o ID {id} nie istnieje.", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania szczegółów pojazdu: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    public class ProjectIds
    {
        public int Id { get; set; }

        public string Name { get; set; }
    }

    private async Task SaveChanges()
    {
        isSubmitting = true;

        try
        {
            await editForm.Validate();
            if (editForm.IsValid)
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (string.IsNullOrEmpty(token))
                {
                    Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                    return;
                }

                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.PostAsJsonAsync($"car/{id}/update", new
                {
                    vehicle.Model,
                    vehicle.Color,
                    vehicle.RegistrationNumber,
                    vehicle.Vin,
                    InspectionFrom = vehicle.InspectionFrom?.ToString("yyyy-MM-dd"),
                    InspectionTo = vehicle.InspectionTo?.ToString("yyyy-MM-dd"),
                    InsuranceFrom = vehicle.InsuranceFrom?.ToString("yyyy-MM-dd"),
                    InsuranceTo = vehicle.InsuranceTo?.ToString("yyyy-MM-dd"),
                    vehicle.FleetCardNumber,
                    vehicle.IdProject,
                    Service = new
                    {
                        vehicle.Service.ServiceName,
                        vehicle.Service.Address,
                        vehicle.Service.PhoneNumber
                    },  
                    Leasing = new
                    {
                        vehicle.Leasing.Amount,
                        vehicle.Leasing.MonthlyPayment,
                        vehicle.Leasing.PaymentDay
                    }
                });
    
                var employeeData = System.Text.Json.JsonSerializer.Serialize(vehicle, new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = true
                    });
                Console.WriteLine("Dane wysyłane do API:");
                Console.WriteLine(employeeData);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Zmiany zostały zapisane.", Severity.Success);
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/samochody");
                }
                else
                {
                    Snackbar.Add("Nie udało się zapisać zmian.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Popraw błędy w formularzu przed zapisaniem.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas zapisywania zmian: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/samochody");
    }

    private async Task DeleteVehicle()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Czy na pewno chcesz usunąć ten pojazd?");
        if (!confirm) return;

        isSubmitting = true;

        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"car/{id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Samochód został usunięty.", Severity.Success);
                NavigateBack();
            }
            else
            {
                Snackbar.Add("Nie udało się usunąć pojazdu.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas usuwania pojazdu: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    

    public class VehicleDetails
{
    [JsonPropertyName("id")]
    public int ID { get; set; }

    [JsonPropertyName("model")]
    public string Model { get; set; }

    [JsonPropertyName("color")]
    public string Color { get; set; }

    [JsonPropertyName("registration_number")]
    public string RegistrationNumber { get; set; }

    [JsonPropertyName("vin")]
    public string Vin { get; set; }

    [JsonPropertyName("inspection_from")]
    public DateTime? InspectionFrom { get; set; }

    [JsonPropertyName("inspection_to")]
    public DateTime? InspectionTo { get; set; }

    [JsonPropertyName("insurance_from")]
    public DateTime? InsuranceFrom { get; set; }

    [JsonPropertyName("insurance_to")]
    public DateTime? InsuranceTo { get; set; }

    [JsonPropertyName("fleet_card_number")]
    public string FleetCardNumber { get; set; }

    [JsonPropertyName("project_id")]
    public int IdProject { get; set; }

    [JsonPropertyName("project_name")]
    public string ProjectName { get; set; }

    [JsonPropertyName("service")]
    public ServiceDetails Service { get; set; }

    [JsonPropertyName("leasing")]
    public LeasingDetails Leasing { get; set; }
}

public class ServiceDetails
{
    [JsonPropertyName("id_service")]
    public int IdService { get; set; }

    [JsonPropertyName("serviceName")]
    public string ServiceName { get; set; }

    [JsonPropertyName("address")]
    public string Address { get; set; }

    [JsonPropertyName("phoneNumber")]
    public string PhoneNumber { get; set; }
}

public class LeasingDetails
{
    [JsonPropertyName("amount")]
    public float Amount { get; set; }

    [JsonPropertyName("monthlyPayment")]
    public float MonthlyPayment { get; set; }

    [JsonPropertyName("paymentDay")]
    public int PaymentDay { get; set; }
}


}
