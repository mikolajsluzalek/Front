@page "/projekt/szczegoly/{id:int}"
@using System.Text.Json.Serialization
@inject HttpClient Http
@rendermode InteractiveWebAssembly
@using System.Runtime.InteropServices
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h5" Class="mb-3">Szczegóły Projektu</MudText>
    @if (isLoading)
    {
        <MudProgressLinear Indeterminate="true" />
    }
    else if (project != null)
    {
        <MudForm @ref="editForm" Class="mb-3">
            <MudGrid>
                <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.Name" Label="Nazwa" Required="true" />
            </MudItem>
            <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.OfficeAddress" Label="Adres" />
            </MudItem>
            <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.ProjectNIP" Label="NIP" Required="true" />
            </MudItem>
            <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.FirstName" Label="Imię" />
            </MudItem>
            <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.LastName" Label="Nazwisko" />
            </MudItem>
            <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.Phone" Label="Telefon" />
            </MudItem>
            <MudItem xs="12" md="6">
            <MudTextField @bind-Value="project.Position" Label="Stanowisko" />
            </MudItem>
            </MudGrid>
        </MudForm>
        <div style="display: flex; justify-content: space-between; align-items: center;">
    <div style="display: flex; gap: 1rem;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges" Disabled="@isSubmitting">
            Zapisz zmiany
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteProject" Disabled="@isSubmitting">
            Usuń Projekt
        </MudButton>
    </div>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="NavigateBack">
        Powrót
    </MudButton>
</div>
    }
    else
    {
        <MudText Color="Color.Error">Nie udało się załadować szczegółów projektu.</MudText>
    }

    
</MudContainer>

@code {
    [Parameter]
    public int id { get; set; }

    private ProjectDetails project;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private MudForm editForm;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                Navigation.NavigateTo("/");
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            project = await Http.GetFromJsonAsync<ProjectDetails>($"project/{id}");
            if (project == null)
            {
                Snackbar.Add($"Projekt o ID {id} nie istnieje.", Severity.Warning);
            }
        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            Snackbar.Add($"Projekt o ID {id} nie istnieje.", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania szczegółów projektu: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveChanges()
    {
        isSubmitting = true;

        try
        {
            await editForm.Validate();
            if (editForm.IsValid)
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (string.IsNullOrEmpty(token))
                {
                    Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                    return;
                }

                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.PostAsJsonAsync($"project/{id}/update", project);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Zmiany zostały zapisane.", Severity.Success);
                    await Task.Delay(1000);
                    Navigation.NavigateTo("/projekty");
                }
                else
                {
                    Snackbar.Add("Nie udało się zapisać zmian.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Popraw błędy w formularzu przed zapisaniem.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas zapisywania zmian: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteProject()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Czy na pewno chcesz usunąć ten projekt?");
        if (!confirm) return;

        isSubmitting = true;

        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"project/{id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Projekt został usunięty.", Severity.Success);
                NavigateBack();
            }
            else
            {
                Snackbar.Add("Nie udało się usunąć projektu.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas usuwania projektu: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/projekty");
    }

    public class ProjectDetails
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("office_address")]
        public string OfficeAddress { get; set; }
        [JsonPropertyName("project_nip")]
        public string ProjectNIP { get; set; }
        [JsonPropertyName("first_name")]
        public string FirstName { get; set; }
        [JsonPropertyName("last_name")]
        public string LastName { get; set; }
        [JsonPropertyName("phone")]
        public string Phone { get; set; }
        [JsonPropertyName("position")]
        public string Position { get; set; }
    }
}
