@page "/samochody"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient Http



<div style="margin-top: 2rem;" />
<MudContainer MaxWidth="MaxWidth.Large">
    <MudTable Items="@VehiclesList" Hover="true" Dense="false" ReadOnly="false" Filter="new Func<VehicleDetails,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lista Pojazdów</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col style="width:50px;" />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col style="width:100px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<VehicleDetails, object>(x => x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VehicleDetails, object>(x => x.Make)">Marka</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VehicleDetails, object>(x => x.Model)">Model</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VehicleDetails, object>(x => x.RegistrationNumber)">Tablica Rejestracyjna</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VehicleDetails, object>(x => x.InspectionTo)">Serwis Do</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<VehicleDetails, object>(x => x.InsuranceTo)">Koniec Ubezpieczenia</MudTableSortLabel></MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Marka">@context.Make</MudTd>
                <MudTd DataLabel="Model">@context.Model</MudTd>
                <MudTd DataLabel="Tablica Rejestracyjna">@context.RegistrationNumber</MudTd>
                <MudTd DataLabel="Serwis Do">@context.InspectionTo?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Koniec Ubezpieczenia">@context.InsuranceTo?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Akcje">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Href="@($"/samochod/szczegoly/{context.Id}")">
                        Szczegóły
                    </MudButton>
                </MudTd>
            </RowTemplate>
         <PagerContent>
             <MudTablePager />
         </PagerContent>
     </MudTable>


     <div style="display: flex; justify-content: flex-end; margin-top: 1rem;">
         <MudButton Variant="Variant.Filled" Color="Color.Surface" Href="/formularz-samochodowy">Dodaj Samochód</MudButton>
     </div>
</MudContainer>


    @code {
    private string searchString = string.Empty;
    private List<VehicleDetails> VehiclesList = new List<VehicleDetails>();
    private VehicleDetails vehicleBeforeEdit;
    private VehicleDetails selectedVehicle;



    protected override async Task OnInitializedAsync()
    {

        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrEmpty(token))
            {
                Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var vehicles = await Http.GetFromJsonAsync<List<VehicleDetails>>("cars");
            if (vehicles != null)
            {
                VehiclesList = vehicles.Select(veh => new VehicleDetails
                    {
                        Id = veh.Id,
                        Make = veh.Model.Split(' ')[0],
                        Model = string.Join(" ", veh.Model.Split(' ').Skip(1)),
                        RegistrationNumber = veh.RegistrationNumber,
                        InspectionTo = veh.InspectionTo,
                        InsuranceTo = veh.InsuranceTo
                    }).ToList();
            }
            else
            {
                Snackbar.Add("Nie udało się załadować danych pojazdów.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania pojazdów: {ex.Message}", Severity.Error);
        }
    }


    private bool FilterFunc(VehicleDetails vehicle)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return vehicle.Make?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               vehicle.Model?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               vehicle.RegistrationNumber?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    public class VehicleDetails
    {
        public int Id { get; set; } 

        public string Make { get; set; }
        
        public string Model { get; set; }

        [JsonPropertyName("registration_number")]
        public string RegistrationNumber { get; set; }
        
        [JsonPropertyName("inspection_to")]
        public DateTime? InspectionTo { get; set; }
        
        [JsonPropertyName("insurance_to")]
        public DateTime? InsuranceTo { get; set; }
    }
}
