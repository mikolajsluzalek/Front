@page "/kwatery"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigate

<div style="margin-top: 2rem;" />
<MudContainer MaxWidth="MaxWidth.Large">
        @if (isLoading)
    {
        <MudTable Items="@AccommodationList" Hover="true" Loading="true" Dense="false" ReadOnly="false" Filter="new Func<AccommodationDetails,bool>(FilterFunc)"> </MudTable>
    }
    else
    {
    <MudTable Items="@AccommodationList" Hover="true" Dense="false" ReadOnly="false" Filter="new Func<AccommodationDetails,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lista Kwater</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
            <col style="width:150px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<AccommodationDetails, object>(x => x.City)">Miasto</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AccommodationDetails, object>(x => x.AccommodationAddress)">Adres</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AccommodationDetails, object>(x => x.NumberOfPlaces)">Ilość Miejsc</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AccommodationDetails, object>(x => x.Payment.Cost)">Koszt Łączny</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AccommodationDetails, object>(x => x.CostPerEmployee)">Koszt na pracownika</MudTableSortLabel></MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
                <MudTd DataLabel="Miasto">@context.City</MudTd>
                    <MudTd DataLabel="Adres">@context.AccommodationAddress</MudTd>
                    <MudTd DataLabel="Ilość Miejsc">@context.NumberOfPlaces</MudTd>
                    <MudTd DataLabel="Koszt Łączny">@($"{context.Payment?.Cost:N2} zł")</MudTd>
                    <MudTd DataLabel="Koszt/Pracownik">@($"{context.CostPerEmployee:N2} zł")</MudTd>
<MudTd DataLabel="Akcje">
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Href="@($"/kwatery/szczegoly/{context.Id}")">
        Szczegóły
    </MudButton>
</MudTd>
            </RowTemplate>
         <PagerContent>
             <MudTablePager />
         </PagerContent>
         <EditButtonContent Context="button">
             <MudIconButton Size="Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
         </EditButtonContent>
     </MudTable>

     <div style="display: flex; justify-content: flex-end; margin-top: 1rem;">
         <MudButton Variant="Variant.Filled" Color="Color.Surface" Href="/formularz-kwatery">Dodaj Kwatere</MudButton>
     </div>
     }
 </MudContainer>

@code {
    private string searchString = string.Empty;
    private List<AccommodationDetails> AccommodationList = new List<AccommodationDetails>();
    private AccommodationDetails selectedAccommodation;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");

                if (string.IsNullOrEmpty(token))
                {
                    Snackbar.Add("Brak tokenu JWT. Użytkownik niezalogowany.", Severity.Error);
                    Navigate.NavigateTo("/");
                }

                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var accommodations = await Http.GetFromJsonAsync<List<AccommodationDetails>>("accommodations");

                if (accommodations != null)
                {
                    AccommodationList = accommodations;
                    isLoading = false;
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Nie udało się załadować danych kwater.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania kwater: {ex.Message}", Severity.Error);
        }
    }


    private bool FilterFunc(AccommodationDetails vehicle)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return vehicle.City?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               vehicle.AccommodationAddress?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    public class AccommodationDetails
{
    public int Id { get; set; }
    public int ProjectId { get; set; }

    [JsonPropertyName("project_name")]
    public string ProjectName { get; set; }

    [JsonPropertyName("city")]
    public string City { get; set; }

    [JsonPropertyName("accommodation_address")]
    public string AccommodationAddress { get; set; }

    [JsonPropertyName("number_of_places")]
    public int NumberOfPlaces { get; set; }

    [JsonPropertyName("contact")]
    public ContactDetails Contact { get; set; }

    [JsonPropertyName("payment")]
    public PaymentDetails Payment { get; set; }

    public decimal CostPerEmployee => NumberOfPlaces > 0 && Payment?.Cost > 0
        ? Payment.Cost / NumberOfPlaces
        : 0;
}

public class ContactDetails
{
    public int Id { get; set; }

    [JsonPropertyName("first_name")]
    public string FirstName { get; set; }

    [JsonPropertyName("last_name")]
    public string LastName { get; set; }

    [JsonPropertyName("phone_number")]
    public string PhoneNumber { get; set; }
}

public class PaymentDetails
{
    public int Id { get; set; }

    [JsonPropertyName("cost")]
    public decimal Cost { get; set; }

    [JsonPropertyName("deposit")]
    public decimal Deposit { get; set; }

    [JsonPropertyName("contract")]
    public string Contract { get; set; }

    [JsonPropertyName("account_number")]
    public string AccountNumber { get; set; }

    [JsonPropertyName("payment_day")]
    public int PaymentDay { get; set; }
}

}